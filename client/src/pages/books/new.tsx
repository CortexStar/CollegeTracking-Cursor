import { useRef, useState } from "react";
import { useLocation } from "wouter";
import { BookMeta, saveBook } from "@/lib/bookStore";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { Loader2 } from "lucide-react";

export default function NewBook() {
  const [, navigate] = useLocation();
  const fileRef = useRef<HTMLInputElement>(null);
  const [pdfUrl, setPdfUrl] = useState<string | null>(null);
  const [title, setTitle] = useState("");
  const [author, setAuthor] = useState("");
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const { toast } = useToast();

  function handleFile(e: React.ChangeEvent<HTMLInputElement>) {
    const f = e.target.files?.[0];
    if (!f) return;
    
    // Start loading
    setLoading(true);
    
    // Check file size - warn about large files
    const fileSizeMB = f.size / (1024 * 1024);
    if (fileSizeMB > 20) {
      toast({
        title: "Large File Warning",
        description: `This file is ${fileSizeMB.toFixed(1)}MB. Files larger than 20MB may not upload successfully.`,
        variant: "destructive",
      });
    }
    
    // Set the title immediately based on filename
    setTitle(f.name.replace(/\.pdf$/i, ""));
    
    // Convert the file to a data URL for display
    const reader = new FileReader();
    reader.onload = (event) => {
      if (event.target?.result) {
        setPdfUrl(event.target.result as string);
        setLoading(false);
      }
    };
    reader.onerror = () => {
      toast({
        title: "Error",
        description: "Failed to read the PDF file. Please try a different file.",
        variant: "destructive"
      });
      setLoading(false);
    };
    reader.readAsDataURL(f);
  }

  async function save() {
    if (!pdfUrl || !title) {
      toast({
        title: "Missing information",
        description: "Please upload a PDF file and provide a title",
        variant: "destructive"
      });
      return;
    }
    
    try {
      setSaving(true);
      
      // Create the book metadata with the data URL for uploading
      const meta: BookMeta = { 
        id: "", // ID will be generated by the server
        title, 
        author, 
        pdfData: pdfUrl // This will be used for upload
      };
      
      // Upload to server
      const savedBook = await saveBook(meta);
      
      toast({
        title: "Book added",
        description: "Your book has been added successfully"
      });
      
      // Navigate to the book viewer with the new ID
      navigate(`/books/${savedBook.id}`);
    } catch (error) {
      // Handle upload errors
      toast({
        title: "Error saving book",
        description: "There was an error uploading your book. Please try again.",
        variant: "destructive"
      });
      console.error("Error saving book:", error);
    } finally {
      setSaving(false);
    }
  }

  return (
    <div className="container mx-auto px-4 py-6 flex-grow">
      <h1 className="text-3xl font-bold mb-6">Add a New Book</h1>
      <Card>
        <CardHeader>
          <CardTitle>Upload PDF</CardTitle>
          <CardDescription>
            Books are stored on the server and will be available across all your devices and browser sessions.
          </CardDescription>
        </CardHeader>
        <CardContent className="p-6 flex flex-col gap-4">
          <Button 
            size="lg"
            className="w-full h-40 flex flex-col items-center justify-center gap-2 border-2 border-dashed border-gray-300 dark:border-gray-700"
            variant="outline"
            onClick={() => fileRef.current?.click()}
            disabled={loading || saving}
          >
            {loading || saving ? (
              <Loader2 className="h-12 w-12 text-gray-400 dark:text-gray-600 animate-spin" />
            ) : (
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-12 w-12 text-gray-400 dark:text-gray-600"
                viewBox="0 0 24 24" fill="none" stroke="currentColor"
                strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"
              >
                <path d="M14 3v4a1 1 0 0 0 1 1h4" />
                <path d="M17 21H7a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7l5 5v11a2 2 0 0 1-2 2z" />
                <path d="M9 17h6" />
                <path d="M9 13h6" />
              </svg>
            )}
            {loading ? 'Processing PDF...' 
             : saving ? 'Uploading...' 
             : (pdfUrl ? 'Change PDF...' : 'Choose PDF...')}
          </Button>
          
          <input
            ref={fileRef} 
            type="file" 
            accept="application/pdf" 
            hidden 
            onChange={handleFile}
          />

          {pdfUrl && (
            <>
              <div className="grid gap-4">
                <div className="grid gap-2">
                  <label htmlFor="title" className="text-sm font-medium">Title</label>
                  <Input
                    id="title"
                    value={title}
                    onChange={e => setTitle(e.target.value)}
                    placeholder="Book title"
                    disabled={saving}
                  />
                </div>
                
                <div className="grid gap-2">
                  <label htmlFor="author" className="text-sm font-medium">Author</label>
                  <Input
                    id="author"
                    value={author}
                    onChange={e => setAuthor(e.target.value)}
                    placeholder="Author name"
                    disabled={saving}
                  />
                </div>
              </div>
              
              <Button 
                onClick={save}
                className="mt-4"
                size="lg"
                disabled={loading || saving}
              >
                {loading || saving ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    {loading ? 'Processing...' : 'Uploading...'}
                  </>
                ) : (
                  'Save & Open Book'
                )}
              </Button>
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
import React, { useMemo, useState } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from "@/components/ui/card";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  ReferenceArea,
  CartesianGrid,
} from "recharts";
import { motion } from "framer-motion";

/**
 * GPA DASHBOARD – v4 (green theme)
 * ────────────────────────────────────────────────────────────────────────────
 * Views:
 *   • History    – term GPA
 *   • Overall    – cumulative GPA
 *   • Forecast   – linear‑regression projection of cumulative GPA
 *
 *  ▸ All GPAs rounded to two decimals.
 *  ▸ Lines now green (#10b981). Forecast uses dotted stroke.
 */

export interface Semester {
  id: string;
  term: string;
  yearLevel: "Freshman" | "Sophomore" | "Junior" | "Senior";
  gpa: number | null;
  credits?: number;
  gradePoints?: number;
}

interface Props {
  semesters: Semester[];
}

const GREEN = "#10b981"; // emerald‑500
const round2 = (v: number | null) => (v == null ? null : Math.round(v * 100) / 100);

/** ───────────────────────────────────────────────────────────────────────── */
const GpaDashboard: React.FC<Props> = ({ semesters }) => {
  const [mode, setMode] = useState<"history" | "overall" | "forecast">("history");

  /** Build cumulative GPA (weighted if credits provided) */
  const cumulativeData = useMemo(() => {
    let cred = 0;
    let pts = 0;
    return semesters.map((s) => {
      if (s.gpa != null) {
        if (s.credits != null && s.gradePoints != null) {
          cred += s.credits;
          pts += s.gradePoints;
        } else {
          cred += 1;
          pts += s.gpa;
        }
      }
      const cumulative = cred ? pts / cred : null;
      return { ...s, cumulative: round2(cumulative) } as any;
    });
  }, [semesters]);

  /** -------- Linear regression on cumulative GPA -------- */
  const forecastData = useMemo(() => {
    if (!cumulativeData.length) return [] as any[];

    // take completed rows
    const observed = cumulativeData.filter((d) => d.cumulative != null);
    const n = observed.length;
    if (n < 2) return cumulativeData; // not enough data

    const xs = observed.map((_, i) => i);
    const ys = observed.map((d) => d.cumulative as number);
    const xBar = xs.reduce((a, b) => a + b, 0) / n;
    const yBar = ys.reduce((a, b) => a + b, 0) / n;
    const slope = xs.reduce((acc, x, i) => acc + (x - xBar) * (ys[i] - yBar), 0) /
                  xs.reduce((acc, x) => acc + Math.pow(x - xBar, 2), 0);
    const intercept = yBar - slope * xBar;

    // copy existing
    const proj: any[] = cumulativeData.map((d, i) => ({ ...d, proj: d.cumulative }));

    // generate future semesters up to Senior Spring (max 6)
    const levelOrder = ["Freshman", "Sophomore", "Junior", "Senior"] as const;
    let last = semesters[semesters.length - 1];
    let [season, yStr] = last.term.split(" ") as ["Fall" | "Spring", string];
    let year = parseInt(yStr, 10);
    let levelIdx = levelOrder.indexOf(last.yearLevel as any);
    if (season === "Fall") {
      season = "Spring";
      year += 1;
    } else {
      season = "Fall";
    }
    if (season === "Fall" && levelIdx < 3) levelIdx++;

    const horizon = 6;
    for (let k = 1; k <= horizon; k++) {
      const termIdx = observed.length - 1 + k; // x for regression
      const yPred = round2(intercept + slope * termIdx);
      proj.push({
        id: `fcast-${season}-${year}`,
        term: `${season} ${year}`,
        yearLevel: levelOrder[levelIdx],
        gpa: null,
        cumulative: null,
        proj: yPred,
      });

      // advance term
      if (season === "Fall") {
        season = "Spring";
      } else {
        season = "Fall";
        year += 1;
        if (levelIdx < 3) levelIdx++;
      }
    }
    return proj;
  }, [cumulativeData, semesters]);

  /** Pick dataset for chart */
  const { data, yKey, label } = useMemo(() => {
    switch (mode) {
      case "history":
        return { data: semesters.map((s) => ({ ...s, gpa: round2(s.gpa) })), yKey: "gpa", label: "GPA" };
      case "overall":
        return { data: cumulativeData, yKey: "cumulative", label: "Cumulative GPA" };
      case "forecast":
        return { data: forecastData, yKey: "proj", label: "Projected GPA" };
    }
  }, [mode, semesters, cumulativeData, forecastData]);

  /** -------------------------------------------------------------------- */
  return (
    <Card className="w-full backdrop-blur-md bg-white/60 dark:bg-slate-900/60 border border-white/30 dark:border-slate-700/40 shadow-xl rounded-2xl">
      <CardHeader className="flex flex-col md:flex-row md:items-end md:justify-between gap-4 p-6">
        <div>
          <CardTitle className="text-3xl font-semibold tracking-tight">GPA Overview</CardTitle>
          <p className="text-muted-foreground text-sm">
            {mode === "history" && "Semester GPA"}
            {mode === "overall" && "Cumulative GPA"}
            {mode === "forecast" && "Projected cumulative GPA (linear)"}
          </p>
        </div>
        <ToggleGroup type="single" value={mode} onValueChange={(v) => v && setMode(v as any)} className="border border-slate-300 dark:border-slate-700 rounded-full overflow-hidden backdrop-blur-sm">
          <ToggleGroupItem value="history" className="px-4 py-1">History</ToggleGroupItem>
          <ToggleGroupItem value="overall" className="px-4 py-1">Overall</ToggleGroupItem>
          <ToggleGroupItem value="forecast" className="px-4 py-1">Forecast</ToggleGroupItem>
        </ToggleGroup>
      </CardHeader>

      <CardContent className="p-0">
        <motion.div key={mode} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }} className="w-full h-[500px]">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ top: 20, right: 36, left: 12, bottom: 40 }}>
              <CartesianGrid strokeDasharray="3 3" strokeOpacity={0.1} />
              <XAxis dataKey="term" interval="preserveStartEnd" tick={{ fontSize: 12, fill: "var(--muted-foreground)" }} />
              <YAxis domain={[0, 4]} tickFormatter={(v) => v.toFixed(2)} tickCount={5} tick={{ fontSize: 12, fill: "var(--muted-foreground)" }} />
              <Tooltip formatter={(v: any) => (v != null ? (v as number).toFixed(2) : "–")} labelFormatter={(t) => `Term: ${t}`} contentStyle={{ backdropFilter: "blur(6px)", background: "rgba(255,255,255,0.7)", borderRadius: 12, border: "none" }} />
              <Legend verticalAlign="top" height={36} wrapperStyle={{ paddingBottom: 16 }} />

              {(["Freshman", "Sophomore", "Junior", "Senior"] as const).map((level) => {
                const idx = data.map((s, i) => (s.yearLevel === level ? i : -1)).filter((i) => i !== -1);
                if (!idx.length) return null;
                const [start, end] = [Math.min(...idx) - 0.5, Math.max(...idx) + 0.5];
                return <ReferenceArea key={level} x1={start} x2={end} strokeOpacity={0} fillOpacity={0.04} />;
              })}

              <Line
                type="monotone"
                dataKey={yKey}
                name={label}
                stroke={GREEN}
                strokeWidth={3}
                strokeLinecap="round"
                strokeDasharray={mode === "forecast" ? "4 4" : undefined}
                dot={{ r: 6, stroke: "white", strokeWidth: 2, fill: GREEN }}
                activeDot={{ r: 7 }}
                connectNulls
              />
            </LineChart>
          </ResponsiveContainer>
        </motion.div>
      </CardContent>
    </Card>
  );
};

export default GpaDashboard;
